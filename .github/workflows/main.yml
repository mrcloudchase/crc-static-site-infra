name: Deploy Infrastructure

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: write
  actions: write

jobs:
  deploy-infra:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Azure using Federated Identity Credentials
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # Check if Resource Group Exists
    - name: Check if Resource Group Exists
      id: check_rg
      run: |
        RG_EXISTS=$(az group exists --name ${{ secrets.RESOURCE_GROUP_NAME }})
        if [ "$RG_EXISTS" == "true" ]; then
          echo "Resource Group exists: $RG_EXISTS"
          echo "rg_exists=true" >> $GITHUB_OUTPUT
        else
          echo "Resource Group does not exist."
          echo "rg_exists=false" >> $GITHUB_OUTPUT

    # Create Resource Group if it does not exist and capture the output
    - name: Create Resource Group if it does not exist
      id: create_rg
      if: steps.check_rg.outputs.rg_exists == 'false'
      run: |
        echo "Creating Resource Group..."
        az deployment sub create \
          --location ${{ secrets.RESOURCE_GROUP_LOCATION }} \
          --name rg-deployment \
          --template-file infra/rg.bicep \
          --parameters resourceGroupLocation=${{ secrets.RESOURCE_GROUP_LOCATION }} resourceGroupName=${{ secrets.RESOURCE_GROUP_NAME }}
        echo "resource_group_name=${{ secrets.RESOURCE_GROUP_NAME }}" >> $GITHUB_OUTPUT

    # Check if Storage Account Exists
    - name: Check if Storage Account Exists
      id: check_storage
      if: steps.check_rg.outputs.rg_exists == 'true'
      run: |
        STORAGE_EXISTS=$(az storage account show --name ${{ secrets.STORAGE_ACCOUNT_NAME }} --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} --query "name" -o tsv || echo "")
        if [ -z "$STORAGE_EXISTS" ]; then
          echo "Storage Account does not exist."
          echo "storage_exists=false" >> $GITHUB_OUTPUT
        else
          echo "Storage Account exists: $STORAGE_EXISTS"
          echo "storage_account_name=$STORAGE_EXISTS" >> $GITHUB_OUTPUT
        fi

    # Create Storage Account if it does not exist and capture the output
    - name: Deploy Storage Account
      id: deploy_storage
      if: steps.check_storage.outputs.storage_exists == 'false' || steps.check_rg.outputs.rg_exists == 'false'
      run: |
        echo "Creating Storage Account..."
        STORAGE_ACCOUNT_NAME=$(az deployment group create \
          --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} \
          --name crc-static-site-deployment \
          --template-file infra/storage.bicep \
          --query "properties.outputs.storageAccountName.value" -o tsv)
        echo "storage_account_name=$STORAGE_ACCOUNT_NAME" >> $GITHUB_OUTPUT

    # Debugging: Output the Storage Account and Resource Group Name
    - name: Debug Outputs
      run: |
        RESOURCE_GROUP_NAME=${{ secrets.RESOURCE_GROUP_NAME }}
        STORAGE_ACCOUNT_NAME=${{ steps.deploy_storage.outputs.storage_account_name || steps.check_storage.outputs.storage_account_name }}
        echo "Storage Account Name: $STORAGE_ACCOUNT_NAME"
        echo "Resource Group Name: $RESOURCE_GROUP_NAME"

        if [[ -z "$STORAGE_ACCOUNT_NAME" ]]; then
          echo "ERROR: Storage account name is empty!"
          exit 1
        fi

        echo "Successfully retrieved storage account name: $STORAGE_ACCOUNT_NAME"
        echo "Successfully retrieved resource group name: $RESOURCE_GROUP_NAME"

    # Trigger the crc-static-site-code workflow with both resource group and storage account name
    - name: Trigger Static Site Workflow
      uses: peter-evans/repository-dispatch@v3
      with:
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        repository: mrcloudchase/crc-static-site-code
        event-type: infra-deployment-success
        client-payload: '{"resource_group_name": "${{ secrets.RESOURCE_GROUP_NAME }}", "storage_account_name": "${{ steps.deploy_storage.outputs.storage_account_name || steps.check_storage.outputs.storage_account_name }}"}'
